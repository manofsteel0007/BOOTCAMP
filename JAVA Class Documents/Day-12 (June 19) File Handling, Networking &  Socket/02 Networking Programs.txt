######################################################################

import java.net.*;
import java.io.*;
class Client
{
 public static void main(String args[])throws Exception 
 {
    Socket s=new Socket("127.0.0.1",7000);

    InputStream is=s.getInputStream();
    
    DataInputStream dis=new DataInputStream(is);
    System.out.println(dis.readUTF());
 }
} 
--------------------------------------------
import java.net.*;
import java.io.*;
import java.util.Scanner;
class Server
{
 public static void main(String args[])throws Exception 
 {

   Scanner scanner=new Scanner(System.in);

   System.out.print("Enter the Value to Write in Client Socket");
   
   String s1=scanner.nextLine();


   ServerSocket ss=new ServerSocket(7000);

   while(true)
   {

    System.out.println("Waiting");

    Socket s=ss.accept();

    OutputStream os=s.getOutputStream();

    DataOutputStream dos=new DataOutputStream(os);

    dos.writeUTF(s1);
   }
 }
} 

######################################################################

//Server Application
import java.awt.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
public class ServerApp extends Frame implements ActionListener,Runnable 
{
	ServerSocket s;
	Socket s1;
	BufferedReader br;
	BufferedWriter bw;
	TextField text;
	Button button1,button2;
	List list;
                  Label l1;
	public void run()
	{
		try
                {
                       s1.setSoTimeout(1);
                }

                catch(Exception e){}

                while (true)
		{
			try
                        {
                            list.addItem(br.readLine());
			}
                        catch (Exception h){}
		}
	}
	public static void main(String arg[])
	{
		new ServerApp("Server Applicaton:");
		
	}
	
	public ServerApp(String m)
	{
		super(m);
		setSize(450,500);
		setLocation(0,0);

		this.setLayout(null);

                l1=new Label("Server Application");
                l1.setFont(new Font("verdana",Font.BOLD,23));


		button1 = new Button("Send");
		button2 = new Button("Exit");
		button1.addActionListener(this);
		button2.addActionListener(this);
		list = new List();
		text = new TextField();

                l1.setBounds(100,50,300,30);
                list.setBounds(100,100,200,200);
                text.setBounds(100,320,200,30);
                button1.setBounds(100,400,80,30);
                button2.setBounds(220,400,80,30);

                add(l1);
		add(list);
		add(button1);
		add(button2);
		add(text);
                setBackground(Color.pink);

		setVisible(true);

		try{
			s = new ServerSocket(100);
			
			s1=s.accept();
			br = new BufferedReader(new InputStreamReader(s1.getInputStream()));
			bw = new BufferedWriter(new OutputStreamWriter(s1.getOutputStream()));
			bw.write("Hello");
                        bw.newLine();
                        bw.flush();
			 Thread th;
			 th = new Thread(this);
			 th.start();
			 
			
		}catch(Exception e){}
	}

	public void actionPerformed(ActionEvent e)
	{
		 if (e.getSource().equals(button2))
                 {
			 System.exit(0);
                 }
		 else
                 {
                    try{
                        bw.write(text.getText());
			bw.newLine();
                        bw.flush();
                       }
                       catch(Exception m){}
		 }

	}
	
}

--------------------------------------------

//Client Application
import java.awt.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
public class Client extends Frame implements ActionListener,Runnable 
{
	Socket s;
	BufferedReader br;
	BufferedWriter bw;
	TextField text;
	Button button1,button2;
	List list;
        Label l1;
	public static void main(String arg[])
	{
		new Client("Client Applicaton:");
		
	}
	public void run()
	{
		try
                {
                    s.setSoTimeout(1);
                }
                catch(Exception e){}
                
		while (true)
		{
			try
                        {
                            list.addItem(br.readLine());
			}
                        catch (Exception h){}
		}
	}
	
	public Client(String m)
	{
		super(m);
		setSize(450,500);
		setLocation(500,0);

		this.setLayout(null);

                l1=new Label("Client Application");
                l1.setFont(new Font("verdana",Font.BOLD,23));

                
		button1 = new Button("Send");
		button2 = new Button("Exit");
		button1.addActionListener(this);
		button2.addActionListener(this);
		list = new List();
		text = new TextField();

                l1.setBounds(100,50,300,30);
                list.setBounds(100,100,200,200);
                text.setBounds(100,320,200,30);
                button1.setBounds(100,400,80,30);
                button2.setBounds(220,400,80,30);

                add(l1);
		add(list);
		add(button1);
		add(button2);		
		add(text);
                setBackground(Color.pink);

		setVisible(true);
		try{
			/*Put the current IP address for current machine  
			if you didn't have an actual server and clients
			if you have an actual server and clients put the client IP address*/
\
			s = new Socket("127.0.0.1",100);
			br = new BufferedReader(new InputStreamReader(s.getInputStream()));
			bw = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
			Thread th;
			th = new Thread(this);
			th.start();
			
		}catch(Exception e){}
		
	}
	public void actionPerformed(ActionEvent e)
	{
		 if (e.getSource().equals(button2))
                 {
			 System.exit(0);
                 }
		 else
                 {
                    try{
                        bw.write(text.getText());
			bw.newLine();
                        bw.flush();			
                       }
                       catch(Exception m){}
		 }
				  
	}
	
}


######################################################################

RMI Programs
--------------

import java.rmi.Remote;
import java.rmi.RemoteException;


public interface RI extends Remote
{
	int product(int x,int y) throws RemoteException;
}


--------------------------------------------

import java.rmi.Naming;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class SI extends UnicastRemoteObject  implements RI
{

 	public SI()throws RemoteException
 	{
            System.out.println("-------------------->   Remote Object ");
 	}

 	public int product(int x,int y)throws RemoteException
 	{
            return x*y;
 	} 
 	public static void main(String args[])
 	{
  		try
  		{
   			Remote ob=new SI();

   			Naming.rebind("ServerObject",ob);

   			System.out.println("Object Binded");
  		}
  		catch(Exception e)
  		{
  		}
 	}
}
   

--------------------------------------------

import java.rmi.Naming;
import java.rmi.Remote;
import java.util.Scanner;

public class RC 
{ 
 	public static void main(String args[])throws Exception
 	{
  		String path="rmi://localhost/ServerObject";

                Scanner s = new Scanner(System.in);

                System.out.print(" Enter the Value for A    ");
                int a=s.nextInt();
                
                System.out.print(" Enter the Value for B    ");
                int b=s.nextInt();

  		Remote ob=Naming.lookup(path);
                
  		RI ss=(RI)ob;

		int result=ss.product(a,b);
                
  		System.out.println("-------------------->  "+result); 
  
 	}
}
######################################################################

